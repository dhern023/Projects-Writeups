import random
import numpy

#simulates one game of Bowser's Big Blast from Mario Party 2
#Assumes all players are equally likely to get a bomb.

#1 is the bomb 
L = [0]*4 +[1]
player = [0,0,0,0]
count = 0
while len(L) > 2:
    #shuffles the list
    random.shuffle(L)
    #players 1-4 pick a random number (in order)
    choice = random.sample(L,(len(L)-1))
    count = count + 1
    
    #counts the number of players who are left
    if len(L) == 5:
        player[3] = player[3] + 1
    if len(L) == 4:
        player[2] = player[2] + 1
    if len(L) == 3:
        player[1] = player[1] + 1
    
    print(L)
    #As soon as one's pick is a bomb, they lose
    if choice.count(1) == 1:
        #the number of choices is reduced
        del L[L.index(0)]
print(count)
print(player)

##############################

#Calculates the expectation of the number of rounds in each game starting with four players

#record all of the counts
Counts = []
Players = []
num_iter = 100000
for i in range(num_iter):
    #1 is the bomb 
    L = [0]*4 +[1]
    player = [0,0,0,0]
    count = 0
    while len(L) > 2:
        #shuffles the list
        random.shuffle(L)
        #players 1-4 pick a random number (in order)
        choice = random.sample(L,(len(L)-1))
        count = count + 1

        #counts the number of players who are left
        if len(L) == 5:
            player[3] = player[3] + 1
        if len(L) == 4:
            player[2] = player[2] + 1
        if len(L) == 3:
            player[1] = player[1] + 1
        #if your pick is the bomb
        if choice.count(1) == 1:
            #the number of choices is reduced 
            del L[L.index(0)]
    Counts.append(count)
    Players.append(player)

#Prints the expected value
print(sum(Counts)/num_iter)

#prints the average number of rounds with 4 players remaining, 3 remaining, etc.
S = numpy.array([sum(i) for i in zip(*Players)])
print(S/num_iter)

###############################

print(max(Counts))

###############################

print(min(Counts))

###############################

#displays the scenarios where the number of rounds hits above a specified value

games = 0
for i in range(len(Players)):
    if max(Players[i]) > 6:
        print(Players[i])
        games = games + 1
print(games)